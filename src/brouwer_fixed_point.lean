import .homology_of_spheres
import algebra.quadratic_discriminant

lemma connected_to_disconnected_surjection_nogo {Œ± Œ≤ : Type*}
  [topological_space Œ±] [topological_space Œ≤] (h1 : connected_space Œ±) (h2 : ¬¨ connected_space Œ≤)
  : ¬¨ ‚àÉ (r : C(Œ±, Œ≤)), function.surjective r :=
begin
  rintros ‚ü®r, h‚ü©,
  have : is_connected (set.range r) := is_connected_range r.continuous_to_fun,
  rw h.range_eq at this,
  refine h2 _,
  exact @connected_space.mk _ _ ‚ü®this.right‚ü© (set.nonempty_iff_univ_nonempty.mpr this.left)
end

lemma ball_to_sphere_retraction_nogo (n : ‚Ñï)
  : ¬¨ ‚àÉ (r : C(metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1,
               metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1)),
      ‚àÄ x h, (r ‚ü®x, metric.sphere_subset_closed_ball h‚ü© : euclidean_space ‚Ñù (fin n)) = x :=
begin
  rw not_exists,
  intros r H,
  let i : C(metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1,
            metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1)
        := ‚ü®_, continuous_inclusion metric.sphere_subset_closed_ball‚ü©,
  have : r.comp i = continuous_map.id _,
  { ext : 2, cases a with a ha, exact H a ha },
  by_cases n > 0,
  { let i' : Top.of (metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1)
          ‚ü∂ Top.of (metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1)
        := i,
    let r' : Top.of (metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1)
          ‚ü∂ Top.of (metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1)
        := r,
    cases n, { exact lt_irrefl 0 h },
    by_cases n > 0,
    { change i' ‚â´ r' = ùüô (Top.of (metric.sphere (0 : euclidean_space ‚Ñù (fin (n + 1))) 1)) at this,
      replace this := congr_arg (@category_theory.functor.map _ _ _ _ (singular_homology ‚Ñ§ n) _ _) this,
      simp at this,
      have H : category_theory.limits.is_zero ((singular_homology ‚Ñ§ n).obj (Top.of (metric.closed_ball (0 : euclidean_space ‚Ñù (fin (n + 1))) 1))),
      { obtain ‚ü®P‚ü© := homology_of_contractible_space ‚Ñ§ (Top.of (metric.closed_ball (0 : euclidean_space ‚Ñù (fin (n + 1))) 1)) _ n h,
        exact category_theory.limits.is_zero_of_iso_of_zero (category_theory.limits.is_zero_zero _) P.symm,
        exact convex.contractible_space (strict_convex_closed_ball ‚Ñù _ _).convex 
                                        ‚ü®0, metric.mem_closed_ball_self zero_le_one‚ü© },
      refine absurd (category_theory.limits.is_zero_of_iso_of_zero H (category_theory.iso.mk _ _ _ this)) _,
      { exact category_theory.limits.is_zero.eq_of_src H _ _ },
      { obtain ‚ü®P‚ü© := @nth_homology_of_n_sphere ‚Ñ§ _ _ n h,
        intro H', 
        have H'' := category_theory.limits.is_zero_of_iso_of_zero H' P,
        rw category_theory.limits.is_zero_iff_id_eq_zero at H'', 
        have H''' : (ùüô (Module.of ‚Ñ§ ‚Ñ§) : ‚Ñ§ ‚Üí ‚Ñ§) 1 = 0, { rw H'', refl },
        exact @one_ne_zero ‚Ñ§ _ _ H''' } },
    { simp at h, subst h,
      refine connected_to_disconnected_surjection_nogo _ _ ‚ü®r, _‚ü©,
      { rw ‚Üê is_connected_iff_connected_space,
        refine convex.is_connected (strict_convex_closed_ball ‚Ñù _ _).convex
                                   ‚ü®0, metric.mem_closed_ball_self zero_le_one‚ü© },
      { let x0 : (metric.sphere (0 : euclidean_space ‚Ñù (fin 1)) 1) := ‚ü®(Œª _, (-1) : fin 1 ‚Üí ‚Ñù), _‚ü©,
        swap, { simp [euclidean_space.norm_eq] },
        let x1 : (metric.sphere (0 : euclidean_space ‚Ñù (fin 1)) 1) := ‚ü®(Œª _, 1 : fin 1 ‚Üí ‚Ñù), _‚ü©,
        swap, { simp [euclidean_space.norm_eq] },
        let F := two_point_t2_space_homeo_coprod_two_points x0 x1 _ _,
        { intro h, haveI := h,
          have h' : is_connected (set.range F.symm) := is_connected_range F.symm.continuous_to_fun,
          rw [F.symm.range_coe, sum.is_connected_iff] at h',
          cases h', 
          { obtain ‚ü®t, _, ht‚ü© := h',
            have := @set.mem_univ (punit.{1} ‚äï punit.{1}), rw ht at this,
            specialize this (sum.inr ()), cases this with _ h'', simp at h'', exact h'' },
          { obtain ‚ü®t, _, ht‚ü© := h',
            have := @set.mem_univ (punit.{1} ‚äï punit.{1}), rw ht at this,
            specialize this (sum.inl ()), cases this with _ h'', simp at h'', exact h'' } },
        { simp [x0, x1], refine ne.symm _, rw [ne.def, eq_neg_self_iff], exact one_ne_zero },
        { rintro ‚ü®x, hx‚ü©, simp [euclidean_space.norm_eq] at hx, simp [x0, x1], 
          refine or.imp _ _ (or.symm hx); intro; ext i; fin_cases i; assumption } },
      { refine @function.right_inverse.surjective _ _ r i _,
        intro x, rw [‚Üê continuous_map.comp_apply, this], refl } } },
  { simp at h, subst h, 
    suffices : is_empty ‚Ü•(metric.sphere (0 : euclidean_space ‚Ñù (fin 0)) 1),
    { obtain ‚ü®h‚ü© := this, exact h (r ‚ü®0, metric.mem_closed_ball_self zero_le_one‚ü©) },
    apply_with metric.sphere_is_empty_of_subsingleton {instances:=ff},
    { dsimp [euclidean_space, pi_Lp], apply_instance },
    { exact zero_ne_one.symm } }
end.

notation `‚ü™`x`, `y`‚ü´` := @inner ‚Ñù _ _ x y

noncomputable
def time_to_boundary (n : ‚Ñï) (p q : euclidean_space ‚Ñù (fin n)) : ‚Ñù :=
  (2 * ‚ü™q - p, q‚ü´ - real.sqrt (4 * ‚ü™q - p, q‚ü´^2 + 4 * ‚à•p - q‚à•^2 * (1 - ‚à•q‚à•^2))) / (2 * ‚à•p - q‚à•^2)

noncomputable
def time_to_boundary_aux (x : { tuple : ‚Ñù √ó ‚Ñù √ó ‚Ñù // tuple.snd.fst > 0 ‚àß tuple.snd.snd ‚â§ 1 }) : ‚Ñù :=
  (2 * x.val.fst - real.sqrt (4 * x.val.fst^2 + 4 * x.val.snd.fst^2 * (1 - x.val.snd.snd^2))) / (2 * x.val.snd.fst^2)

noncomputable
def time_to_boundary' (n : ‚Ñï) (pair : { x : metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                                           √ó metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                                           // x.fst ‚â† x.snd })
  := time_to_boundary n pair.val.fst pair.val.snd

noncomputable
def time_to_boundary'_aux (n : ‚Ñï) (pair : { x : metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                                              √ó metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                                              // x.fst ‚â† x.snd })
  : { tuple : ‚Ñù √ó ‚Ñù √ó ‚Ñù // tuple.snd.fst > 0 ‚àß tuple.snd.snd ‚â§ 1 } := {
    val := ‚ü®‚ü™pair.val.snd.val - pair.val.fst.val, pair.val.snd‚ü´,
            ‚à•pair.val.fst.val - pair.val.snd.val‚à•,
            ‚à•pair.val.snd.val‚à•‚ü©,
    property := by { split; simp, { rw [sub_eq_zero, ‚Üê subtype.ext_iff], exact pair.property },
                     { have := pair.val.snd.property, simp at this, exact this } }
  }.

lemma time_to_boundary'_fact (n : ‚Ñï)
  : time_to_boundary' n  = time_to_boundary_aux ‚àò time_to_boundary'_aux n :=
begin
  ext x, rcases x with ‚ü®‚ü®‚ü®x1, h1‚ü©, ‚ü®x2, h2‚ü©‚ü©, h‚ü©, refl
end.

lemma time_to_boundary'_continuous (n : ‚Ñï) : continuous (time_to_boundary' n) :=
begin
  rw time_to_boundary'_fact,
  refine continuous.comp _ _,
  { refine continuous.div _ _ _, { continuity }, { continuity },
    { rintro ‚ü®‚ü®a, b, c‚ü©, h1, h2‚ü©, rw mul_ne_zero_iff, simp, exact ne_of_gt h1 } },
  { refine continuous_subtype_mk _ _, 
    refine continuous.prod_mk _ ((continuous_norm.comp _).prod_mk (continuous_norm.comp _)),
    { refine continuous.inner _ _,
      { exact continuous.sub (continuous_subtype_val.comp (continuous_snd.comp continuous_subtype_val))
                             (continuous_subtype_val.comp (continuous_fst.comp continuous_subtype_val)) },
      { exact continuous_subtype_coe.comp (continuous_snd.comp continuous_subtype_val) } },
    { exact continuous.sub (continuous_subtype_val.comp (continuous_fst.comp continuous_subtype_val))
                             (continuous_subtype_val.comp (continuous_snd.comp continuous_subtype_val)) },
    { exact continuous_subtype_val.comp (continuous_snd.comp continuous_subtype_val) } }
end.

lemma real.quadratic_eq_zero_iff {a b c : ‚Ñù} (ha : a ‚â† 0) (h : discrim a b c ‚â• 0) (x : ‚Ñù) :
  a * x * x + b * x + c = 0
  ‚Üî x = (-b + real.sqrt (discrim a b c)) / (2 * a) ‚à® x = (-b - real.sqrt (discrim a b c)) / (2 * a) :=
  quadratic_eq_zero_iff ha (by { rw [‚Üê pow_two, real.sq_sqrt h] }) x

lemma real.AM_GM2 (a b : ‚Ñù) : 2 * a * b ‚â§ a^2 + b^2 :=
  sub_nonneg.mp (eq.subst (sub_sq' a b) (sq_nonneg (a - b))) 

lemma time_to_boundary'_lands_in_sphere (n : ‚Ñï) (pair)
  : time_to_boundary' n pair ‚Ä¢ pair.val.fst.val + (1 - time_to_boundary' n pair) ‚Ä¢ pair.val.snd.val
  ‚àà metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1 :=
begin
  simp, generalize h : time_to_boundary' n pair = t,
  rw [norm_eq_sqrt_real_inner, real_inner_add_add_self,
      real_inner_smul_left, real_inner_smul_left, real_inner_smul_left,
      real_inner_smul_right, real_inner_smul_right, real_inner_smul_right,
      real.sqrt_eq_iff_sq_eq _ zero_le_one, one_pow],
  { ring_nf SOP,
    rw [mul_assoc, ‚Üê mul_neg, ‚Üê mul_add, ‚Üê mul_add, mul_assoc, mul_assoc, ‚Üê mul_sub],
    symmetry,
    rw [mul_comm t _, mul_comm, pow_two, ‚Üê mul_assoc, ‚Üê sub_eq_zero, add_sub_assoc],
    rw real.quadratic_eq_zero_iff,
    { right,
      rw ‚Üê h, delta time_to_boundary' time_to_boundary discrim,
      congr' 2,
      { rw [neg_sub, mul_comm, inner_sub_left, sub_mul], refl },
      { refine congr_arg _ _,
        rw [‚Üê real_inner_self_eq_norm_sq, real_inner_sub_sub_self, inner_sub_left], 
        rw [‚Üê neg_sq, neg_sub, ‚Üê sub_mul, mul_pow, mul_comm],
        congr, norm_cast,
        rw [‚Üê mul_neg, neg_sub, ‚Üê real_inner_self_eq_norm_sq,
            sub_eq_add_neg, add_assoc, mul_comm (2 : ‚Ñù)], refl },
      { rw [‚Üê real_inner_self_eq_norm_sq, real_inner_sub_sub_self,
            sub_eq_add_neg, add_assoc, mul_comm (2 : ‚Ñù)], refl } },
    { refine ne_of_eq_of_ne _ (sq_eq_zero_iff.not.mpr (norm_ne_zero_iff.mpr (sub_ne_zero.mpr (subtype.ext_iff.not.mp pair.property)))),
      rw [‚Üê real_inner_self_eq_norm_sq, real_inner_sub_sub_self], ring },
    { delta discrim,
      rw [ge_iff_le, sub_nonneg, sub_sq],
      transitivity (0 : ‚Ñù),
      { rw [‚Üê neg_nonneg, ‚Üê mul_neg, neg_sub],
        refine mul_nonneg (mul_nonneg zero_le_four _) _,
        { rw [‚Üê sub_eq_neg_add, add_sub_left_comm, add_comm, mul_comm, ‚Üê real_inner_sub_sub_self,
              real_inner_self_eq_norm_sq],
         apply sq_nonneg },
        { rw [sub_nonneg, real_inner_self_eq_norm_sq, sq_le_one_iff (norm_nonneg _),
              ‚Üê mem_closed_ball_zero_iff],
          exact subtype.mem _ } },
      { rw [add_comm, ‚Üê add_sub_assoc, sub_nonneg, add_comm], apply real.AM_GM2 } } },
  { ring_nf SOP,
    rw [mul_assoc, ‚Üê mul_neg, ‚Üê mul_add, ‚Üê mul_add, mul_assoc, mul_assoc, ‚Üê mul_sub],
    rw [‚Üê sub_eq_neg_add, add_sub_left_comm, add_comm _ (_ - _), mul_comm _ (2 : ‚Ñù),
        ‚Üê real_inner_sub_sub_self, real_inner_self_eq_norm_sq],
    rw [mul_comm _ (2 : ‚Ñù), ‚Üê mul_sub, ‚Üê inner_sub_left, add_right_comm,
        ‚Üê sub_neg_eq_add, sub_nonneg],
    refine le_trans (neg_le_abs_self _) _,
    rw [‚Üê real_inner_smul_left, ‚Üê real_inner_smul_left, smul_smul, mul_comm, ‚Üê smul_smul],
    refine le_trans (abs_real_inner_le_norm _ _) _,
    rw [norm_smul, real.norm_eq_abs, abs_eq_self.mpr (zero_le_two : (0 : ‚Ñù) ‚â§ (2 : ‚Ñù))],
    refine le_trans (real.AM_GM2 _ _) (le_of_eq _),
    rw [norm_smul, real.norm_eq_abs, mul_pow, sq_abs, real_inner_self_eq_norm_sq] }
end.

-- rcases pair with ‚ü®‚ü®‚ü®p, hp‚ü©, ‚ü®q, hq‚ü©‚ü©, h‚ü©,
-- rw [subtype.val_eq_coe],
-- simp only [prod.fst, prod.snd, subtype.coe_mk],

lemma time_to_boundary_eq_zero_if_in_boundary (n : ‚Ñï) (p q : euclidean_space ‚Ñù (fin n)) 
  (h1 : p ‚àà metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1)
  (h2 : q ‚àà metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1)
  : time_to_boundary n p q = 0 :=
begin
  simp at h1 h2,
  simp only [div_eq_zero_iff, time_to_boundary],
  left,
  rw [h2, one_pow, sub_self, mul_zero, add_zero, real.sqrt_mul, sub_eq_zero], 
  symmetry, congr,
  { rw real.sqrt_eq_iff_sq_eq; norm_cast; apply nat.zero_le },
  { apply real.sqrt_sq,
    rw [inner_sub_left, sub_nonneg, real_inner_self_eq_norm_mul_norm],
    refine le_trans (real_inner_le_norm _ _) _,
    rw h2, simp, exact h1 },
  { norm_cast, exact nat.zero_le 4 }
end

/-
Proof sketch, due to Ivo Vekemans (see https://www.ivovekemans.net/mathematical-art):

I slept.
And slumbering dreamt.
And dreaming, I ambled clockwise around a great circular lake in an infinite desert.
And ambling, caught my sweater on a thorn, and began to unravel.
And unravelling, I saw all the points of the lake.
And observed, the lake began to stir.
And stirring, the surface did not break, remaining contained.
And contained, the visited a violent vortex, but STILL the surface did not break.
And unbroken, the whirring pool... ...subsided, as the last sweater thread unwound.
And unwound in the setting sun I spied again the thorn.
And spying, noticed that no point on the lake was where it began.
And beginning at each point emanated a single ray of light, through the point it was prior perturbation, each ray illuminating a spot on the shore.
And sure that the points perturbed from the bank illuminated those points from whence they came, I tied the ends of my sweater together and HEAVED. And heaved and heaved.
And, so heft, the thread, without breaking or crossing the lake, rewound unto me a complete sweater.
And sweating from the exertion, I woke.
And waking, recalled that one is not zero, snapping the thread.
-/

lemma brouwer_fixed_point_for_sphere (n : ‚Ñï)
  (f : C(metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1,
         metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1))
  : ‚àÉ x : metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1, f x = x :=
begin
  by_contra, rw not_exists at h,
  apply ball_to_sphere_retraction_nogo n,
  let mk_pair : metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
              ‚Üí { x : metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                    √ó metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1
                    // x.fst ‚â† x.snd } := Œª p, ‚ü®‚ü®f p, p‚ü©, h p‚ü©,
  have mk_pair_cont : continuous mk_pair :=
    continuous_subtype_mk _ (continuous.prod_mk f.continuous_to_fun continuous_id),
  let r :  C(metric.closed_ball (0 : euclidean_space ‚Ñù (fin n)) 1,
             metric.sphere (0 : euclidean_space ‚Ñù (fin n)) 1) :=
    continuous_map.comp ‚ü®(Œª p, ‚ü®time_to_boundary' n p ‚Ä¢ p.val.fst.val
                                + (1 - time_to_boundary' n p) ‚Ä¢ p.val.snd.val,
                                time_to_boundary'_lands_in_sphere n p‚ü©), _‚ü©
                        ‚ü®mk_pair, mk_pair_cont‚ü©,
  swap,
  { refine continuous_subtype_mk _ (continuous.add _ _);
    refine continuous.smul _ _,
    { exact time_to_boundary'_continuous n },
    { exact continuous_subtype_val.comp (continuous_fst.comp continuous_subtype_val) },
    { exact continuous.sub (continuous_const) (time_to_boundary'_continuous n) },
    { exact continuous_subtype_val.comp (continuous_snd.comp continuous_subtype_val) } },
  refine ‚ü®r, _‚ü©,
  intros x h,
  simp [r, mk_pair, time_to_boundary'],
  rw time_to_boundary_eq_zero_if_in_boundary n _ _ (subtype.mem _) h,
  simp
end.

theorem brouwer_fixed_point {V : Type*}
  [normed_add_comm_group V] [normed_space ‚Ñù V] [finite_dimensional ‚Ñù V]
  : ‚àÄ (s : set V), convex ‚Ñù s ‚Üí is_compact s ‚Üí set.nonempty s ‚Üí 
    ‚àÄ (f : C(s, s)), ‚àÉ x, f x = x :=
begin
  intros s h1 h2 h3,
  have : affine_dim ‚Ñù s < cardinal.aleph_0, 
  { apply @lt_of_le_of_lt _ _ _ (module.rank ‚Ñù V),
    { dsimp [affine_dim],
      rw [‚Üê finite_dimensional.finrank_eq_dim, ‚Üê finite_dimensional.finrank_eq_dim],
      norm_cast,
      apply submodule.finrank_le },
    { rw ‚Üê finite_dimensional.finrank_eq_dim, exact cardinal.nat_lt_aleph_0 _ } },
  rw cardinal.lt_aleph_0 at this, 
  obtain ‚ü®n, hn‚ü© := this,
  obtain ‚ü®F‚ü© := convex_compact_homeo_to_ball s h1 h2 h3 n hn,
  intro f, 
  let g := F.to_continuous_map.comp (f.comp F.symm.to_continuous_map),
  obtain ‚ü®y, hy‚ü© := brouwer_fixed_point_for_sphere n g,
  refine ‚ü®F.symm y, _‚ü©,
  rw [‚Üê homeomorph.coe_symm_to_equiv, equiv.eq_symm_apply],
  exact hy
end